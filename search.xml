<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>P8786 [蓝桥杯 2022 省 B] 李白打酒加强版【动态规划,dp】</title>
      <link href="/2023/01/14/%E6%9D%8E%E7%99%BD%E6%89%93%E9%85%92%E5%8A%A0%E5%BC%BA%E7%89%88/"/>
      <url>/2023/01/14/%E6%9D%8E%E7%99%BD%E6%89%93%E9%85%92%E5%8A%A0%E5%BC%BA%E7%89%88/</url>
      
        <content type="html"><![CDATA[<h2 id="蓝桥杯-2022-省-B-李白打酒加强版"><a href="#蓝桥杯-2022-省-B-李白打酒加强版" class="headerlink" title="[蓝桥杯 2022 省 B] 李白打酒加强版"></a>[蓝桥杯 2022 省 B] 李白打酒加强版</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>话说大诗人李白，一生好饮。幸好他从不开车。</p><p>一天，他提着酒显，从家里出来，酒显中有酒 <code>2</code> 斗。他边走边唱：</p><blockquote><p>无事街上走，提显去打酒。<br>逢店加一倍，遇花喝一斗。</p></blockquote><p>这一路上，他一共遇到店 <code>N</code> 次, 遇到花 <code>M</code> 次。已知最后一次遇到的是花，他正好把酒喝光了。</p><p>请你计算李白这一路遇到店和花的顺序，有多少种不同的可能?</p><p>注意：没酒（<code>0</code> 斗）时遇店是合法的，加倍后还是没酒; 但是没酒时遇花是不合法的。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行包含两个整数 <code>N</code> 和 <code>M</code>。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出一个整数表示答案。由于答案可能很大，输出模 <code>1000000007</code>（即 <code>10^9+7</code>）的结果。</p><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 10</span><br></pre></td></tr></table></figure><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">14</span><br></pre></td></tr></table></figure><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><blockquote><p><strong>【样例说明】</strong></p><p>如果我们用 0 代表遇到花, 1 代表遇到店, 14 种顺序如下: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">010101101000000</span><br><span class="line">010110010010000</span><br><span class="line">011000110010000</span><br><span class="line">100010110010000</span><br><span class="line">011001000110000</span><br><span class="line">100011000110000</span><br><span class="line">100100010110000</span><br><span class="line">010110100000100</span><br><span class="line">011001001000100</span><br><span class="line">100011001000100</span><br><span class="line">100100011000100</span><br><span class="line">011010000010100</span><br><span class="line">100100100010100</span><br><span class="line">101000001010100</span><br></pre></td></tr></table></figure><p><strong>【评测用例规模与约定】</strong></p><p>对于 40 %的评测用例: 1 &lt;N, M &lt; 10。</p><p>对于 <code>100 %</code> 的评测用例: <code>1 &lt; N, M &lt; 100</code> 。 </p><p>蓝桥杯 2022 省赛 B 组 I 题。题目分析</p><p>主要是一个DFS深搜，要从n个数中找出任意k个数相加，计算其值是否为素数。</p><ul><li>和排列组合为问题相似，n选3，n选n，有几种排列的方式</li><li>但是这个题要的是 k 个数，所以要使用 num 来计数</li><li>并且还需要用一个 for 循环来控制是否需要进入 dfs</li></ul></blockquote><h3 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h3><h5 id="1-题意"><a href="#1-题意" class="headerlink" title="1.题意"></a>1.题意</h5><p>设李白有酒va，有两种操作。并且最后一次操作为（2）</p><ul><li><p>（1）va&#x3D;va*2（一共n次）</p></li><li><p>（2）va&#x3D;va-1（一共m次）</p></li></ul><p>va 初始值为 2,要求经过 n+m次操作后 va&#x3D;0的方案数取模。</p><h5 id="2-状态"><a href="#2-状态" class="headerlink" title="2.状态"></a>2.状态</h5><p>​    状态设计：dp[i][j][k]的值表示遇到i家店，j朵花，酒壶中还剩k斗酒的可能情况数；<br>​    <strong>状态转移方程：dp[i][j][k]&#x3D;dp[i-1][j][k&#x2F;2](i&gt;1&amp;&amp;k%2&#x3D;&#x3D;0) + dp[i][j-1][k+1](j&gt;1);</strong><br>​    边界设计：除了dp[0][0][2]&#x3D;1，其他元素全为0；<br>​    他一共遇到店 N 次，遇到花 M 次。已知最后一次遇到的是花， 他正好把酒喝光了；所以<br>​    最后一次肯定遇到的是花，那么最后的结果便是dp[N][M-1][1];<br>​    并且酒壶中酒的容量不能超过M；</p><h3 id="程序如下："><a href="#程序如下：" class="headerlink" title="程序如下："></a>程序如下：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;<span class="comment">//别忘记取模</span></span><br><span class="line"><span class="type">int</span> n,m,dp[<span class="number">105</span>][<span class="number">105</span>][<span class="number">105</span>];<span class="comment">//dp数组</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=m<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>&amp;&amp;j==<span class="number">0</span>) </span><br><span class="line">                <span class="keyword">continue</span>; </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=<span class="number">100</span>;k++)<span class="comment">//因为最多出现100次操作2，故va最大为100</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(k%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;i) </span><br><span class="line">                    dp[i][j][k]+=dp[i<span class="number">-1</span>][j][k/<span class="number">2</span>];<span class="comment">//操作1</span></span><br><span class="line">                <span class="keyword">if</span>(j) </span><br><span class="line">                    dp[i][j][k]+=dp[i][j<span class="number">-1</span>][k+<span class="number">1</span>];<span class="comment">//操作2</span></span><br><span class="line">                dp[i][j][k]%=mod;<span class="comment">//取模</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[n][m<span class="number">-1</span>][<span class="number">1</span>]%mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>石子合并[动态规划]</title>
      <link href="/2023/01/14/P1880%20%5BNOI1995%5D%20%E7%9F%B3%E5%AD%90%E5%90%88%E5%B9%B6/"/>
      <url>/2023/01/14/P1880%20%5BNOI1995%5D%20%E7%9F%B3%E5%AD%90%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="NOI1995-石子合并"><a href="#NOI1995-石子合并" class="headerlink" title="[NOI1995] 石子合并"></a>[NOI1995] 石子合并</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个圆形操场的四周摆放 <code>N</code> 堆石子，现要将石子有次序地合并成一堆，规定每次只能选相邻的 <code>2</code> 堆合并成新的一堆，并将新的一堆的石子数，记为该次合并的得分。</p><p>试设计出一个算法,计算出将 <code>N</code> 堆石子合并成 <code>1</code> 堆的最小得分和最大得分。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>数据的第 <code>1</code> 行是正整数 <code>N</code>，表示有 <code>N</code> 堆石子。</p><p>第 <code>2</code> 行有 <code>N</code> 个整数，第 <code>i</code> 个整数 <code>a_i</code> 表示第 <code>i</code> 堆石子的个数。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出共 <code>2</code> 行，第 <code>1</code> 行为最小得分，第 <code>2</code> 行为最大得分。</p><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">4 5 9 4</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">43</span><br><span class="line">54</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><blockquote><p><code>1&lt;N&lt; 100</code>，<code>0&lt;a_i&lt;20</code>。题目分析</p><p>主要是一个DFS深搜，要从n个数中找出任意k个数相加，计算其值是否为素数。</p><ul><li>和排列组合为问题相似，n选3，n选n，有几种排列的方式</li><li>但是这个题要的是 k 个数，所以要使用 num 来计数</li><li>并且还需要用一个 for 循环来控制是否需要进入 dfs</li></ul></blockquote><h3 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h3><p>这是一道区间dp十分经典的模板题，让我们揣测一下，前辈们是如何得到这个状态转移方程的。</p><p>首先，要计算合并的最大值、最小值，既然是动态规划，我们需要洞悉其中一些关联且确定的状态。</p><p>以下以最大值为例。</p><p>既然是最大值，那么求得的结果是否满足每一区间都是该区间所能达得到的的最大值？</p><p>显然是这样的。反证法：倘若有一个区间不是，那么换做该区间取得最大值的方案，最终结果将比原得分大。显然必定满足任意区间得分一定是该区间内的最大值。</p><p>这样我们可以定义状态f[i][j]，表示i到j合并后的最大得分。其中1&lt;&#x3D;i&lt;&#x3D;j&lt;&#x3D;N。</p><p>既然这样，我们就需要将这一圈石子分割。很显然，我们需要枚举一个k，来作为这一圈石子的分割线。</p><p>这样我们就能得到状态转移方程：</p><p>f[i][j] &#x3D; max(f[i][k] + f[k+1][j] + d(i,j));其中，1&lt;&#x3D;i&lt;&#x3D;&lt;&#x3D;k&lt;j&lt;&#x3D;N。</p><p>d(i,j)表示从i到j石子个数的和。</p><p>那么如何编写更快的递推来解决这个问题？</p><p>在考虑如何递推时，通常考虑如下几个方面：</p><p>是否能覆盖全部状态？</p><p>求解后面状态时是否保证前面状态已经确定？</p><p>是否修改了已经确定的状态？</p><p>也就是说，在考虑递推顺序时，务必参考动态规划的适应对象多具有的性质，具体参考《算法导论》相关或百度百科或wiki。</p><p>既然之前说过我们需要枚举k来划分i和j，那么如果通过枚举i和j进行状态转移，很显然某些k值时并不能保证已经确定过所需状态。</p><p>如，i&#x3D;1 to 10,j&#x3D;1 to 10,k&#x3D;1 to 9.当i&#x3D;1,j&#x3D;5,k&#x3D;3时，显然状态f[k+1][j]没有结果。</p><p>那么，我们是不是应该考虑枚举k？</p><p>但这样i和j就难以确定了。</p><p>我们不难得到一个两全的方法：枚举j-i，并在j-i中枚举k。这样，就能保证地推的正确。</p><h3 id="程序如下："><a href="#程序如下：" class="headerlink" title="程序如下："></a>程序如下：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span>  </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;   </span><br><span class="line"><span class="type">int</span> n,minl,maxl,f1[<span class="number">300</span>][<span class="number">300</span>],f2[<span class="number">300</span>][<span class="number">300</span>],num[<span class="number">300</span>];  </span><br><span class="line"><span class="type">int</span> s[<span class="number">300</span>];  </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">d</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j)</span></span>&#123;<span class="keyword">return</span> s[j]-s[i<span class="number">-1</span>];&#125;  </span><br><span class="line"><span class="comment">//转移方程：f[i][j] = max(f[i][k]+f[k+1][j]+d[i][j];</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n+n;i++)  <span class="comment">//好吧，终于有时间看看评论区，看来大家对这里异议蛮多的，这里统一解释一下，因为是一个环，所以需要开到两倍再枚举分界线，最后肯定是最大的 </span></span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num[i]);  </span><br><span class="line">        num[i+n]=num[i];  </span><br><span class="line">        s[i]=s[i<span class="number">-1</span>]+num[i];  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> p=<span class="number">1</span>;p&lt;n;p++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=i+p;(j&lt;n+n) &amp;&amp; (i&lt;n+n);i++,j=i+p)  </span><br><span class="line">        &#123;  </span><br><span class="line">            f2[i][j]=<span class="number">999999999</span>;  </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=i;k&lt;j;k++)  </span><br><span class="line">            &#123;  </span><br><span class="line">                f1[i][j] = <span class="built_in">max</span>(f1[i][j], f1[i][k]+f1[k+<span class="number">1</span>][j]+<span class="built_in">d</span>(i,j));   </span><br><span class="line">                f2[i][j] = <span class="built_in">min</span>(f2[i][j], f2[i][k]+f2[k+<span class="number">1</span>][j]+<span class="built_in">d</span>(i,j));  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    minl=<span class="number">999999999</span>;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        maxl=<span class="built_in">max</span>(maxl,f1[i][i+n<span class="number">-1</span>]);  </span><br><span class="line">        minl=<span class="built_in">min</span>(minl,f2[i][i+n<span class="number">-1</span>]);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n%d&quot;</span>,minl,maxl);  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>取数游戏 。（搜索 枚举 深度优先搜索,DFS）</title>
      <link href="/2023/01/14/%E5%8F%96%E6%95%B0%E6%B8%B8%E6%88%8F/"/>
      <url>/2023/01/14/%E5%8F%96%E6%95%B0%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="取数游戏"><a href="#取数游戏" class="headerlink" title="取数游戏"></a>取数游戏</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>一个<code>N * M</code>的由非负整数构成的数字矩阵，你需要在其中取出若干个数字，使得取出的任意两个数字不相邻（若一个数字在另外一个数字相邻<code>8</code>个格子中的一个即认为这两个数字相邻），求取出数字和最大是多少。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>第1行有一个正整数<code>T</code>，表示了有<code>T</code>组数据。</p><p>对于每一组数据，第一行有两个正整数<code>N</code>和<code>M</code>，表示了数字矩阵为<code>N</code>行<code>M</code>列。</p><p>接下来<code>N</code>行，每行<code>M</code>个非负整数，描述了这个数字矩阵。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p><code>T</code>行，每行一个非负整数，输出所求得的答案。</p><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">4 4</span><br><span class="line">67 75 63 10</span><br><span class="line">29 29 92 14</span><br><span class="line">21 68 71 56</span><br><span class="line">8 67 91 25</span><br><span class="line">2 3</span><br><span class="line">87 70 85</span><br><span class="line">10 3 17</span><br><span class="line">3 3</span><br><span class="line">1 1 1</span><br><span class="line">1 99 1</span><br><span class="line">1 1 1</span><br></pre></td></tr></table></figure><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">271</span><br><span class="line">172</span><br><span class="line">99</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><blockquote><p>对于第1组数据，取数方式如下：</p><p>[67] 75 63 10</p><p>29 29 [92] 14</p><p>[21] 68 71 56</p><p>8 67 [91] 25</p><p>对于<code>20%</code>的数据，<code>N, M≤3</code>；</p><p>对于<code>40%</code>的数据，<code>N,M≤4</code>；</p><p>对于<code>60%</code>的数据，<code>N, M≤5</code>；</p><p>对于<code>100%</code>的数据，<code>N, M≤6,T≤20</code>。</p></blockquote><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><h4 id="拿到这道题，首先分析解题算法。"><a href="#拿到这道题，首先分析解题算法。" class="headerlink" title="拿到这道题，首先分析解题算法。"></a><strong>拿到这道题，首先分析解题算法。</strong></h4><p>如果使用贪心法，每次去最大值，那么可以发现有问题。因为每取一个数，相邻的数就不能再取，那么每次决策就会影响下次结果，从而导致贪心决策不能最优化。</p><p>动态规划也是如此，在动态规划中，每一个分步决策不能影响后续结果，所以此算法也排除。</p><p>那么再观察数据范围：</p><p><strong>对于100%的数据，N, M≤6,T≤20N,M≤6,T≤20。</strong></p><p>这是一个较小的范围，所以可以考虑暴力枚举，而对于一个图，以及一个变化的状态，<strong>深度优先搜索（dfs）</strong> 应该是一个比较适合的算法。</p><hr><h4 id="再考虑每个数的状态。"><a href="#再考虑每个数的状态。" class="headerlink" title="再考虑每个数的状态。"></a><strong>再考虑每个数的状态。</strong></h4><p>显然，对于一个数，有取与不取两种状态，状态改变取决于周围取数的变化。我们用 <strong>mark[ i ][ j ]</strong> 记录点 <strong>( i , j )</strong> 附近有几个数，若 <strong>mark[ i ][ j ] ! &#x3D; 0</strong> 就代表不能取这个数。</p><h3 id="程序如下："><a href="#程序如下：" class="headerlink" title="程序如下："></a>程序如下：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> d[<span class="number">8</span>][<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;;<span class="comment">//方向数组用来控制搜索时的方向 </span></span><br><span class="line"><span class="type">int</span> t,n,m,s[<span class="number">8</span>][<span class="number">8</span>],mark[<span class="number">8</span>][<span class="number">8</span>],ans,mx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="comment">//搜索函数，表示搜索点(x,y) </span></span><br><span class="line"><span class="keyword">if</span>(y==m+<span class="number">1</span>)&#123;<span class="comment">//当y到边界时，搜索下一行 </span></span><br><span class="line"><span class="built_in">dfs</span>(x+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x==n+<span class="number">1</span>)&#123;<span class="comment">//当x到边界时，搜索结束，刷新最大值 </span></span><br><span class="line">mx=<span class="built_in">max</span>(ans,mx);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">dfs</span>(x,y+<span class="number">1</span>);<span class="comment">// 不取此数的情况 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(mark[x][y]==<span class="number">0</span>)&#123; <span class="comment">//取此数的情况（需保证此数周围没有取其他数，即mark[i][j]==0）</span></span><br><span class="line">ans+=s[x][y];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> fx=<span class="number">0</span>;fx&lt;<span class="number">8</span>;++fx)&#123; <span class="comment">//标记周围的数 </span></span><br><span class="line">++mark[x+d[fx][<span class="number">0</span>]][y+d[fx][<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(x,y+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> fx=<span class="number">0</span>;fx&lt;<span class="number">8</span>;++fx)&#123; <span class="comment">//回溯 </span></span><br><span class="line">--mark[x+d[fx][<span class="number">0</span>]][y+d[fx][<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line">ans-=s[x][y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;t; </span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="built_in">sizeof</span>(s));</span><br><span class="line"><span class="built_in">memset</span>(mark,<span class="number">0</span>,<span class="built_in">sizeof</span>(mark));<span class="comment">//在做每个数据前都要初始化数组 </span></span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;++j)&#123;</span><br><span class="line">cin&gt;&gt;s[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">mx=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>);<span class="comment">//从点(1,1)开始搜索 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,mx);<span class="comment">//输出答案 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>填涂颜色（搜索 广度优先搜索,BFS 队列）</title>
      <link href="/2023/01/14/%E5%A1%AB%E6%B6%82%E9%A2%9C%E8%89%B2/"/>
      <url>/2023/01/14/%E5%A1%AB%E6%B6%82%E9%A2%9C%E8%89%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="填涂颜色"><a href="#填涂颜色" class="headerlink" title="填涂颜色"></a>填涂颜色</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>由数字 <code>0</code> 组成的方阵中，有一任意形状闭合圈，闭合圈由数字 <code>1</code> 构成，围圈时只走上下左右 <code>4</code> 个方向。现要求把闭合圈内的所有空间都填写成 <code>2</code>。例如：<code>6* 6</code> 的方阵（<code>n=6</code>），涂色前和涂色后的方阵如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0 0 0 0 0 0</span><br><span class="line">0 0 1 1 1 1                </span><br><span class="line">0 1 1 0 0 1</span><br><span class="line">1 1 0 0 0 1</span><br><span class="line">1 0 0 0 0 1</span><br><span class="line">1 1 1 1 1 1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0 0 0 0 0 0</span><br><span class="line">0 0 1 1 1 1</span><br><span class="line">0 1 1 2 2 1</span><br><span class="line">1 1 2 2 2 1</span><br><span class="line">1 2 2 2 2 1</span><br><span class="line">1 1 1 1 1 1</span><br></pre></td></tr></table></figure><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>每组测试数据第一行一个整数 <code>n(1 &lt;= n &lt;= 30)</code>。</p><p>接下来 <code>n</code> 行，由 <code>0</code> 和 <code>1</code> 组成的 <code>n * n</code> 的方阵。</p><p>方阵内只有一个闭合圈，圈内至少有一个 <code>0</code>。</p><p>感谢黄小U饮品指出本题数据和数据格式不一样. 已修改(输入格式)</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>已经填好数字 <code>2</code> 的完整方阵。</p><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">0 0 0 0 0 0</span><br><span class="line">0 0 1 1 1 1</span><br><span class="line">0 1 1 0 0 1</span><br><span class="line">1 1 0 0 0 1</span><br><span class="line">1 0 0 0 0 1</span><br><span class="line">1 1 1 1 1 1</span><br></pre></td></tr></table></figure><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">0 0 0 0 0 0</span><br><span class="line">0 0 1 1 1 1</span><br><span class="line">0 1 1 2 2 1</span><br><span class="line">1 1 2 2 2 1</span><br><span class="line">1 2 2 2 2 1</span><br><span class="line">1 1 1 1 1 1</span><br></pre></td></tr></table></figure><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><blockquote><p>对于 <code>100%</code> 的数据，<code>1 &lt;= n &lt;= 30</code>。</p></blockquote><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><ul><li>首先，分析题目，这是要将闭合的“1”里面的“0”改写成“2”，然后输出。</li><li>由此，我们猛然发觉，只要‘0’的联通块中，没有在边界的就是闭合的‘0’；（发现这个，就等于做对了一半；）</li><li>因为，从正面推，找闭合中的‘0’不好找。运用BFS或者DFS直接搜索边界中‘0’，所在的联通块，然后标记。</li><li>最后输出时，去除‘1’点和标记了的点，剩下的输出为‘2’，就是正解啦！！！</li></ul><h3 id="程序如下："><a href="#程序如下：" class="headerlink" title="程序如下："></a>程序如下：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">31</span>;            <span class="comment">//最大边界是30，我习惯从1，开始存图； </span></span><br><span class="line"><span class="type">int</span> map[M][M];                <span class="comment">//用于存图； </span></span><br><span class="line"><span class="type">bool</span> vis[M][M];                <span class="comment">//用于记录是否是边界联通块，或者是‘1’； </span></span><br><span class="line"><span class="type">int</span> n,m,a,b,c;                </span><br><span class="line">queue &lt;<span class="type">int</span> &gt; q;                </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>            <span class="comment">//蒟蒻今天用的是BFS； </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[x][y] = <span class="number">1</span> ;            <span class="comment">//把初始点标记，初始点一定为边界，不懂得看主函数； </span></span><br><span class="line">    q.<span class="built_in">push</span>(x);                <span class="comment">//队列存点； </span></span><br><span class="line">    q.<span class="built_in">push</span>(y);</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())            <span class="comment">//BFS开始 </span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> w = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="type">int</span> e = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(map[w+<span class="number">1</span>][e] == <span class="number">0</span> &amp;&amp; w != n &amp;&amp; !vis[w+<span class="number">1</span>][e] )    vis[w+<span class="number">1</span>][e] = <span class="number">1</span>,q.<span class="built_in">push</span>(w+<span class="number">1</span>),q.<span class="built_in">push</span>(e);        <span class="comment">//其实可以用结构体存四个方向，但蒟蒻不想动脑子； </span></span><br><span class="line">        <span class="keyword">if</span>(map[w<span class="number">-1</span>][e] == <span class="number">0</span> &amp;&amp; w != <span class="number">1</span> &amp;&amp; !vis[w<span class="number">-1</span>][e] )    vis[w<span class="number">-1</span>][e] = <span class="number">1</span>,q.<span class="built_in">push</span>(w<span class="number">-1</span>),q.<span class="built_in">push</span>(e);</span><br><span class="line">        <span class="keyword">if</span>(map[w][e+<span class="number">1</span>] == <span class="number">0</span> &amp;&amp; e != n &amp;&amp; !vis[w][e+<span class="number">1</span>] )    vis[w][e+<span class="number">1</span>] = <span class="number">1</span>,q.<span class="built_in">push</span>(w),q.<span class="built_in">push</span>(e+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(map[w][e<span class="number">-1</span>] == <span class="number">0</span> &amp;&amp; e != <span class="number">1</span> &amp;&amp; !vis[w][e<span class="number">-1</span>] )    vis[w][e<span class="number">-1</span>] = <span class="number">1</span>,q.<span class="built_in">push</span>(w),q.<span class="built_in">push</span>(e<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span> ; j &lt;= n ; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cin&gt;&gt;map[i][j];                            <span class="comment">//输入点，并把为‘1’的点标记； </span></span><br><span class="line">            <span class="keyword">if</span>(map[i][j] == <span class="number">1</span>)    vis[i][j] = <span class="number">1</span>;    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">                                <span class="comment">//下面两个for是枚举边界，我用的方法比较笨，望dalao海涵； </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span> ; i &lt;= n ; i = i + n - <span class="number">1</span> )        </span><br><span class="line">    &#123;                                                <span class="comment">//</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span> ; j &lt;= n ; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[i][j])    <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">bfs</span>(i,j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span> ; i &lt;= n ; i = i + n - <span class="number">1</span> )        <span class="comment">//</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span> ; j &lt;= n ; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vis[j][i])    <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">bfs</span>(j,i);            <span class="comment">//十分重要！！！把它换过来，枚举另一组边界； </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++)                <span class="comment">//</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span> ; j &lt;= n ; j++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[i][j])    cout&lt;&lt;<span class="string">&quot;2&quot;</span>&lt;&lt;<span class="string">&quot; &quot;</span>;        <span class="comment">//如果未被标记，这一定是闭合‘1’中的‘0’， 输出‘2’； </span></span><br><span class="line">            <span class="keyword">else</span>     cout&lt;&lt;map[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P8781 [蓝桥杯 2022 省 B] 修建灌木</title>
      <link href="/2023/01/14/P8781%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202022%20%E7%9C%81%20B%5D%20%E4%BF%AE%E5%BB%BA%E7%81%8C%E6%9C%A8/"/>
      <url>/2023/01/14/P8781%20%5B%E8%93%9D%E6%A1%A5%E6%9D%AF%202022%20%E7%9C%81%20B%5D%20%E4%BF%AE%E5%BB%BA%E7%81%8C%E6%9C%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="蓝桥杯-2022-省-B-修建灌木"><a href="#蓝桥杯-2022-省-B-修建灌木" class="headerlink" title="[蓝桥杯 2022 省 B] 修建灌木"></a>[蓝桥杯 2022 省 B] 修建灌木</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>爱丽丝要完成一项修剪灌木的工作。</p><p>有 <code>N</code> 棵灌木整齐的从左到右排成一排。爱丽丝在每天傍晩会修剪一棵灌木，让灌木的高度变为 <code>0</code> 厘米。爱丽丝修剪灌木的顺序是从最左侧的灌木开始，每天向右修剪一棵灌木。当修剪了最右侧的灌木后，她会调转方向，下一天开始向左修剪灌木。直到修剪了最左的灌木后再次调转方向。然后如此循环往复。</p><p>灌木每天从早上到傍晩会长高 <code>1</code> 厘米, 而其余时间不会长高。在第一天的早晨, 所有灌木的高度都是 <code>0</code> 厘米。爱丽丝想知道每棵灌木最高长到多高。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>一个正整数 <code>N</code> ，含义如题面所述。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出 <code>N</code> 行, 每行一个整数, 第行表示从左到右第 <code>i</code> 棵树最高能长到多高。</p><h4 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">2</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><blockquote><p>对于 <code>30 %</code> 的数据, <code>N &lt; 10</code>.</p><p>对于 <code>100 %</code> 的数据, <code>1 &lt; N &lt; 10000</code>. </p><p>蓝桥杯 2022 省赛 B 组 D 题。</p></blockquote><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>如果理解的更深入一点，我们可以发现</p><p><strong>每一棵树的成长高度，都是爱丽丝离开这棵树的天数</strong></p><p>考虑右端点情况：对于第 i 棵树来说，它的高度其实就是爱丽丝离开这棵树的天数，即 2×(n−i)。这个算式里，n−i 表示离右端点的距离，乘 2 是因为这段路过去了还要再走一遍回来</p><p>考虑左端点情况：</p><p>对于第 i 棵树来说，它离左端点的距离为 i-1。</p><p>因为要最高的长度，所以正解的算式为：<code>max(n−i,i−1)×2</code></p><h3 id="程序如下："><a href="#程序如下：" class="headerlink" title="程序如下："></a>程序如下：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123; <span class="comment">//遍历，输出结果</span></span><br><span class="line">cout&lt;&lt;<span class="built_in">max</span>(n-i,i<span class="number">-1</span>)*<span class="number">2</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://i.328888.xyz/2023/01/14/wz7dw.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/14/wz7dw.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="运行结果"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选数【搜索 深度优先搜索,DFS 素数判断,质数,筛法】</title>
      <link href="/2023/01/14/%E9%80%89%E6%95%B0/"/>
      <url>/2023/01/14/%E9%80%89%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="选数【搜索-深度优先搜索-DFS-素数判断-质数-筛法】"><a href="#选数【搜索-深度优先搜索-DFS-素数判断-质数-筛法】" class="headerlink" title="选数【搜索 深度优先搜索,DFS 素数判断,质数,筛法】"></a>选数【搜索 深度优先搜索,DFS 素数判断,质数,筛法】</h2><h1 id="NOIP2002-普及组-选数"><a href="#NOIP2002-普及组-选数" class="headerlink" title="[NOIP2002 普及组] 选数"></a>[NOIP2002 普及组] 选数</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>已知 <code>n</code> 个整数 <code>x_1,x_2,\cdots,x_n</code>，以及 <code>1</code> 个整数 <code>k</code>（<code>k&lt;n</code>）。从 <code>n</code> 个整数中任选 <code>k</code> 个整数相加，可分别得到一系列的和。例如当 <code>n=4</code>，<code>k=3</code>，<code>4</code> 个整数分别为 <code>3,7,12,19</code> 时，可得全部的组合与它们的和为：</p><p><code>3+7+12=22</code></p><p><code>3+7+19=29</code></p><p><code>7+12+19=38</code></p><p><code>3+12+19=34</code></p><p>现在，要求你计算出和为素数共有多少种。</p><p>例如上例，只有一种的和为素数：<code>3+7+19=29</code>。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行两个空格隔开的整数 <code>n,k</code>（<code>1 &lt;= n &lt;= 20</code>，<code>k&lt;n</code>）。</p><p>第二行 <code>n</code> 个整数，分别为 <code>x_1,x_2,````,x_n</code>（<code>1 &lt;= x_i &lt;= 5*10^6</code>）。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一个整数，表示种类数。</p><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4 3</span><br><span class="line">3 7 12 19</span><br></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>主要是一个DFS深搜，要从n个数中找出任意k个数相加，计算其值是否为素数。</p><ul><li>和排列组合为问题相似，n选3，n选n，有几种排列的方式</li><li>但是这个题要的是 k 个数，所以要使用 num 来计数</li><li>并且还需要用一个 for 循环来控制是否需要进入 dfs</li></ul><h3 id="程序如下："><a href="#程序如下：" class="headerlink" title="程序如下："></a>程序如下：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> n,k,a[<span class="number">25</span>],t;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sushu</span><span class="params">(<span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(b&lt;<span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>; i*i&lt;=b; i++)</span><br><span class="line"><span class="keyword">if</span>(b%i==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> num,<span class="type">int</span> sum,<span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">if</span>(num==k) &#123;<span class="comment">//递归num次代表有num个数相加 </span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">sushu</span>(sum))</span><br><span class="line">t++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=j; i&lt;n; i++)</span><br><span class="line"><span class="built_in">dfs</span>(num+<span class="number">1</span>,sum+a[i],i+<span class="number">1</span>);<span class="comment">//当i+1大于等于n时剪枝 </span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>,&amp;n,&amp;k);<span class="comment">//输入n和k </span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);<span class="comment">//将n个数存放在a[]数组中 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);<span class="comment">//（取到的个数，取到的数值和，剪枝条件） </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,t);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://i.328888.xyz/2023/01/14/wzr2A.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/14/wzr2A.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="运行结果"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公交车标价 公交车票价为5角。假设每位乘客只持有两种币值的货币：5角、1元。</title>
      <link href="/2023/01/13/%E5%81%87%E8%AE%BE%E6%AF%8F%E4%BD%8D%E4%B9%98%E5%AE%A2%E5%8F%AA%E6%8C%81%E6%9C%89%E4%B8%A4%E7%A7%8D%E5%B8%81%E5%80%BC%E7%9A%84%E8%B4%A7%E5%B8%81%EF%BC%9A5%E8%A7%92%E3%80%811%E5%85%83/"/>
      <url>/2023/01/13/%E5%81%87%E8%AE%BE%E6%AF%8F%E4%BD%8D%E4%B9%98%E5%AE%A2%E5%8F%AA%E6%8C%81%E6%9C%89%E4%B8%A4%E7%A7%8D%E5%B8%81%E5%80%BC%E7%9A%84%E8%B4%A7%E5%B8%81%EF%BC%9A5%E8%A7%92%E3%80%811%E5%85%83/</url>
      
        <content type="html"><![CDATA[<h1 id="公交车标价-公交车票价为5角。假设每位乘客只持有两种币值的货币：5角、1元。"><a href="#公交车标价-公交车票价为5角。假设每位乘客只持有两种币值的货币：5角、1元。" class="headerlink" title="公交车标价 公交车票价为5角。假设每位乘客只持有两种币值的货币：5角、1元。"></a>公交车标价 公交车票价为5角。假设每位乘客只持有两种币值的货币：5角、1元。</h1><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>公交车票价为5角。假设每位乘客只持有两种币值的货币：5角、1元。</p><p>再假设持有5角的乘客有m人，持有1元的乘客有n人。</p><p>由于特殊情况，开始的时候，售票员没有零钱可找。我们想知道这m+n名乘客以什么样的顺序购票则可以顺利完成购票过程。</p><p>显然，m &lt; n的时候，无论如何都不能完成，m &gt;&#x3D;n的时候，有些情况也不行。</p><p>比如，第一个购票的乘客就持有1元。</p><p>下面的程序计算出这m+n名乘客所有可能顺利完成购票的不同情况的组合数目。</p><p>注意：只关心5角和1元交替出现的次序的不同排列，持有同样币值的两名乘客交换位置并不算做一种新的情况来计数。</p><blockquote><p>&#x2F;&#x2F;m: 持有5角币的人数</p><p>&#x2F;&#x2F;n: 持有1元币的人数</p><p>&#x2F;&#x2F;返回：所有顺利完成购票过程的购票次序的种类数</p><p>int f(int m, int n)</p><p>{</p><p>​    if(m &lt; n) return 0;</p><p>​    if(n&#x3D;&#x3D;0) return 1;</p><p>​    return _______________________;</p><p>}</p></blockquote><h5 id="小贴士："><a href="#小贴士：" class="headerlink" title="小贴士："></a>小贴士：</h5><ul><li><ol><li>浮点的非精确比较。不能用&#x3D;&#x3D;</li></ol></li><li><p>a. 小于一个临界值</p></li><li><p>b. 转化为整数</p></li><li><ol start="2"><li>有理数的高精度表示,注意：舍入规则的细节,  有效数字位数</li></ol></li><li><p>3.有理数的整数分数表示法</p></li><li><ol start="4"><li>IEEE754 规则 特殊的有理数值</li></ol></li></ul><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><h5 id="有m个拿五毛的n个拿一块的（m-gt-x3D-n）时的排列次数等于-有m-1个拿五毛的n个拿一块的排列次数-有m个拿五毛的n-1个拿一块的排列次数"><a href="#有m个拿五毛的n个拿一块的（m-gt-x3D-n）时的排列次数等于-有m-1个拿五毛的n个拿一块的排列次数-有m个拿五毛的n-1个拿一块的排列次数" class="headerlink" title="有m个拿五毛的n个拿一块的（m&gt;&#x3D;n）时的排列次数等于  有m-1个拿五毛的n个拿一块的排列次数 + 有m个拿五毛的n-1个拿一块的排列次数"></a>有m个拿五毛的n个拿一块的（m&gt;&#x3D;n）时的排列次数等于  有m-1个拿五毛的n个拿一块的排列次数 + 有m个拿五毛的n-1个拿一块的排列次数</h5><p>对于此题，采用递归思想，我们可以从最后一个人购票开始考虑，假设（m+n-1）个人已经买好票了，对于第m+n个人他有两种买票情况，持5角买票，或持1元买票，因此得到关系式<strong>solve(m-1,n)<strong>或</strong>solve(m,n-1)</strong>,f是购票函数，而对于第（m+n-1）个人，因为已经假设此时（m+n-2）个人已买好票了，则其买票情况也有两种，持5角买票，或持1元买票，….，最后当第二个人买票时，他有两种买票情况，持5角买票，或持1元买票，最后直到第一个人，也同上述所述。</p><p>　　接下来，我们研究函数出口:</p><p>　　在买票过程中，如果m&lt;n，则一定买票失败，这是第一种递归出口，则直接return。</p><p>　　观察第二个人买票情况可以发现，如果他持的是5角(m&#x3D;1)，则第一个人一定持的是1元，因为m&gt;&#x3D;n,此时n一定为1，此时只有一种情况，…51，这是第二种递归出口，则count++，再执行return。</p><p>　   当买票的人中，持有的是1元的人都没有了，此时剩下的人都持有5角，则只有一种情况，…5555，才能使关系式成立,这是第三种递归出口，count++，再执行return。</p><p>程序如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span>  </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span>  </span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(m &lt; n) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//五毛的少于一块的  </span></span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//一块的为 0 了，只剩下五毛的  </span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">f</span>(m<span class="number">-1</span>, n) + <span class="built_in">f</span>(m, n<span class="number">-1</span>);<span class="comment">//f(m,n)=f(m-1,n)+f(m,n-1)  </span></span><br><span class="line">&#125;   <span class="comment">//有m个拿五毛的n个拿一块的（m&gt;=n）时的排列次数等于   有m-1个拿五毛的n个拿一块的排列次数+ 有m个拿五毛的n-1个拿一块的排列次数  </span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="type">int</span> m,n;  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入拿五毛钱的人数：&quot;</span>);  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;m);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入拿一块钱的人数：&quot;</span>);  </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);  </span><br><span class="line">    <span class="type">int</span> re = <span class="built_in">f</span>(m,n);  </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;所有顺利完成购票过程的购票次序的种类数:%d\n&quot;</span>,re);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://i.328888.xyz/2023/01/13/wBAzE.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wBAzE.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="运行结果"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>猜年龄</title>
      <link href="/2023/01/13/%E7%8C%9C%E5%B9%B4%E9%BE%84/"/>
      <url>/2023/01/13/%E7%8C%9C%E5%B9%B4%E9%BE%84/</url>
      
        <content type="html"><![CDATA[<h2 id="猜年龄"><a href="#猜年龄" class="headerlink" title="猜年龄"></a>猜年龄</h2><h3 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h3><p>美国数学家维纳(N.Wiener)智力早熟，11岁就上了大学。他曾在1935~1936年应邀来中国清华大学讲学。</p><p>  一次，他参加某个重要会议，年轻的脸孔引人注目。于是有人询问他的年龄，他回答说：</p><p> “<strong>我年龄的立方是个4位数。我年龄的4次方是个6位数。这10个数字正好包含了从0到9这10个数字，每个都恰好出现1次。”</strong></p><p>  请你推算一下，他当时到底有多年轻。</p><h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>因为已知年龄的立方是一个4位数字，所以可以推断年龄的范围在10到22之间，因此确定穷举范围为10到22。</p><p>如果年龄还满足“年龄的4次方是一个6位数”这个条件，则先计算年龄的立方值的每一位数字，从低位到高位分别保存到变量b1,b2,b3,b4</p><p>中，再计算年龄的4次方值的每一位数字，从低位到高位分别保存到变量a1,a2,a3,a4,a5,a6中。如果上述10个数字互不相同，则必定是包</p><p>含了从0到9这10个数字并且每个都恰好出现1次，因此只要判断上述10个数字互不相同，即可确定这个年龄值为所求。</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="built_in">guess</span>(<span class="type">int</span> *a,<span class="type">int</span> age) &#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">while</span>(age&gt;<span class="number">0</span>) &#123;</span><br><span class="line">i=age%<span class="number">10</span>;</span><br><span class="line">a[i]++;</span><br><span class="line">age=age/<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="type">int</span> i,j,flag;</span><br><span class="line"><span class="type">long</span> b1,b2;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">10</span>; i&lt;<span class="number">22</span>; i++) &#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">11</span>]= &#123;<span class="number">0</span>&#125;;</span><br><span class="line">b1=i*i*i;</span><br><span class="line">b2=b1*i;</span><br><span class="line"><span class="built_in">guess</span>(a,b1);</span><br><span class="line"><span class="built_in">guess</span>(a,b2);</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">10</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[j]!=<span class="number">1</span>) &#123; <span class="comment">//这里a[j]的值不为1则表示了0-9有的数未出现，有的不止出现一次</span></span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//当flag=1的时候代表这个i不满足0-9只出现一次</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(flag==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;age=%d\n&quot;</span>,i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">flag=<span class="number">0</span>;<span class="comment">//这里是对flag 进行归零处理，当时我忘了处理，flag一直为1就起不了作为标志的作用。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://i.328888.xyz/2023/01/13/wpded.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wpded.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="结果截图"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有一群海盗（不多于20人），在船上比拼酒量。（穷举）</title>
      <link href="/2023/01/13/%E6%9C%89%E4%B8%80%E7%BE%A4%E6%B5%B7%E7%9B%97%EF%BC%88%E4%B8%8D%E5%A4%9A%E4%BA%8E20%E4%BA%BA%EF%BC%89%EF%BC%8C%E5%9C%A8%E8%88%B9%E4%B8%8A%E6%AF%94%E6%8B%BC%E9%85%92%E9%87%8F(%E7%A9%B7%E4%B8%BE)%20/"/>
      <url>/2023/01/13/%E6%9C%89%E4%B8%80%E7%BE%A4%E6%B5%B7%E7%9B%97%EF%BC%88%E4%B8%8D%E5%A4%9A%E4%BA%8E20%E4%BA%BA%EF%BC%89%EF%BC%8C%E5%9C%A8%E8%88%B9%E4%B8%8A%E6%AF%94%E6%8B%BC%E9%85%92%E9%87%8F(%E7%A9%B7%E4%B8%BE)%20/</url>
      
        <content type="html"><![CDATA[<h2 id="有一群海盗（不多于20人），在船上比拼酒量-穷举"><a href="#有一群海盗（不多于20人），在船上比拼酒量-穷举" class="headerlink" title="有一群海盗（不多于20人），在船上比拼酒量(穷举)"></a>有一群海盗（不多于20人），在船上比拼酒量(穷举)</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>有一群海盗（不多于20人），在船上比拼酒量。过程如下：打开一瓶酒，所有在场的人平分喝下，有几个人倒下了。再打开一瓶酒平分，又有倒下的，再次重复…… 直到开了第4瓶酒，坐着的已经所剩无几，海盗船长也在其中。当第4瓶酒平分喝下后，大家都倒下了。</p><p>  等船长醒来，发现海盗船搁浅了。他在航海日志中写到：“……昨天，<strong>我正好喝了一瓶</strong>…….奉劝大家，开船不喝酒，喝酒别开船……”</p><p>  请你根据这些信息，推断开始有多少人，每一轮喝下来还剩多少人。</p><p>  如果有多个可能的答案，请列出所有答案，每个答案占一行。</p><p>  格式是：人数,人数,…</p><p>  例如,有一种可能是：20,5,4,2,0</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>这个船长喝了一整瓶才是问题关键。</p><p>让我们来总结一下信息如下：</p><p>海盗人数：≤20</p><p>第一轮倒下人数多于1 （第一轮至少剩余2人）</p><p>倒数第一轮倒下人数多于1 （倒数第一轮至少剩余2人）</p><p>每一轮剩余人数少于前一轮（至少有4+3+2&#x3D;9人）</p><p>喝酒轮数：4</p><p>船长正好喝了一瓶</p><p>问：开始多少人</p><p>每轮剩多少人</p><p>首先我们粗略确定的是海盗的人数在9~20人内，这个问题喝酒人数比较少，我决定采用设未知数的方法进行分析</p><p>设总人数为x，第一轮剩余人数为a、第二轮为b、第三轮为c，满足关系<code>1/x+1/a+1/b+1/c=1</code>即可。</p><p>进一步转化为编程思路就是按排列的方式寻找a、b、c满足<code>1/x+1/a+1/b+1/c=1</code>即可，若要按某种规律排列显然应该用循环来编写程序。</p><p>举例来说：当x&#x3D;20，可能的情况有：</p><blockquote><p>a b c</p><p>18 17 16</p><p>18 17 15</p><p>18 17 14</p><p>…</p><p>18 17 2</p><p>18 16 15</p></blockquote><p>以此类推，我们可以编写for循环:</p><h3 id="程序如下："><a href="#程序如下：" class="headerlink" title="程序如下："></a>程序如下：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span> n;</span><br><span class="line">    <span class="type">float</span> a,b,c;</span><br><span class="line">    <span class="type">float</span> s1,s2,s3;</span><br><span class="line">    <span class="keyword">for</span>(n=<span class="number">5</span>; n&lt;=<span class="number">20</span>; n++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(a=<span class="number">1</span>; a&lt;n; a++)</span><br><span class="line">            <span class="keyword">for</span>(b=<span class="number">1</span>; b&lt;n; b++)</span><br><span class="line">                <span class="keyword">for</span>(c=<span class="number">1</span>; c&lt;n; c++)</span><br><span class="line">                &#123;</span><br><span class="line">                    s1=n-a;</span><br><span class="line">                    s2=n-a-b;</span><br><span class="line">                    s3=n-a-b-c;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="number">1</span>/n+<span class="number">1</span>/s1+<span class="number">1</span>/s2+<span class="number">1</span>/s3==<span class="number">1</span>&amp;&amp;s1&gt;<span class="number">0</span>&amp;&amp;s2&gt;<span class="number">0</span>&amp;&amp;s3&gt;<span class="number">0</span>)</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;%.0f %.0f %.0f %.0f 0\n&quot;</span>,n,s1,s2,s3);</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://i.328888.xyz/2023/01/13/wprhH.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wprhH.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="运行结果"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Ubuntu下用Hexo和github搭建个人博客（详解）</title>
      <link href="/2023/01/13/%E5%9C%A8Ubuntu%E4%B8%8B%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E8%AF%A6%E8%A7%A3%EF%BC%89-1/"/>
      <url>/2023/01/13/%E5%9C%A8Ubuntu%E4%B8%8B%E7%94%A8Hexo%E5%92%8Cgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E8%AF%A6%E8%A7%A3%EF%BC%89-1/</url>
      
        <content type="html"><![CDATA[<h1 id="在Ubuntu下用Hexo和github搭建个人博客（详解）"><a href="#在Ubuntu下用Hexo和github搭建个人博客（详解）" class="headerlink" title="在Ubuntu下用Hexo和github搭建个人博客（详解）"></a>在Ubuntu下用Hexo和github搭建个人博客（详解）</h1><p>用Hexo和github配合，不用写代码就搭建一套属于自己的个人博客网站（小白也可以尝试）</p><p>Hero还提供了大量主题模版供用户下载。你的博客网站将可以时不时的换一种主题风格，赏心悦目，简直完美！</p><p>（一个属于你的世界！一个可供别人访问的个人世界）</p><blockquote><p>Hexo是一个基于 node.js的快速生成静态博客的开源框架,支持 Markdown和大多数 Octopress<br>插件,一个命令即可部署到 Github页面、 Giteee、 Heroku等,强大的APl,可无限扩展,拥有<br>数百个主题和插件。</p></blockquote><h3 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h3><p>​因为环境我已经安装过了，所以图片展示安装完成的结果。</p><h4 id="1-安装-node-js"><a href="#1-安装-node-js" class="headerlink" title="1.安装 node.js"></a>1.安装 node.js</h4><p><code>sudo apt-get install nodejs</code></p><p><img src="https://i.328888.xyz/2023/01/13/wcQFU.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wcQFU.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113180125853"></p><blockquote><p>使用apt按装方式可能不会安装nodejs的最新版，如需要用最新版可以到官网下载。</p></blockquote><h4 id="2-安装-git"><a href="#2-安装-git" class="headerlink" title="2.安装 git"></a>2.安装 git</h4><p><code>sudo apt-get install git-core</code></p><p><img src="https://i.328888.xyz/2023/01/13/wcYQv.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wcYQv.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113180424353"></p><h4 id="3-安装-npm"><a href="#3-安装-npm" class="headerlink" title="3.安装 npm"></a>3.安装 npm</h4><p><code>sudo apt-get install npm</code></p><p><img src="https://i.328888.xyz/2023/01/13/wmZxy.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wmZxy.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113180611556"></p><h4 id="4-安装-Hexo"><a href="#4-安装-Hexo" class="headerlink" title="4.安装 Hexo"></a>4.安装 Hexo</h4><p><code>sudo npm install -g hexo-cli</code></p><h4 id="5-检查安装是否正确"><a href="#5-检查安装是否正确" class="headerlink" title="5.检查安装是否正确"></a>5.检查安装是否正确</h4><h5 id="依次输入查询版本命令，若正确显示版本号则表示环境安装成功"><a href="#依次输入查询版本命令，若正确显示版本号则表示环境安装成功" class="headerlink" title="依次输入查询版本命令，若正确显示版本号则表示环境安装成功"></a>依次输入查询版本命令，若正确显示版本号则表示环境安装成功</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line"></span><br><span class="line">git version</span><br><span class="line"></span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p><img src="https://i.328888.xyz/2023/01/13/wmiL5.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wmiL5.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113181531919"></p><p><code>hexo -v</code></p><p><img src="https://i.328888.xyz/2023/01/13/wmycZ.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wmycZ.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113181553428"></p><h3 id="二、环境初始化"><a href="#二、环境初始化" class="headerlink" title="二、环境初始化"></a>二、环境初始化</h3><h4 id="1-创建本地博客目录文件夹"><a href="#1-创建本地博客目录文件夹" class="headerlink" title="1.创建本地博客目录文件夹"></a>1.创建本地博客目录文件夹</h4><p><img src="https://i.328888.xyz/2023/01/13/wm4oF.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wm4oF.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113181845598"></p><p><code>cd my_blog</code>进入文件夹，使用<code>npm install</code>命令初始化安装npm</p><p>可以看到我们的hexo站点就已经安装好了，接下来就可以直接启动他了</p><img src="https://i.328888.xyz/2023/01/13/wmUjQ.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wmUjQ.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113182130219" style="zoom:80%;" /><h4 id="2-启动本地服务站点"><a href="#2-启动本地服务站点" class="headerlink" title="2.启动本地服务站点"></a>2.启动本地服务站点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g </span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p><img src="https://i.328888.xyz/2023/01/13/wmnFE.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wmnFE.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113182339740"></p><p>访问<a href="http://localhost:4000/">http://localhost:4000/</a> 至此hero就搭建好了。可以在本地访问了</p><p>下图是我更换了主题后的样式，后面会说到。</p><p><img src="https://i.328888.xyz/2023/01/13/wmtYC.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wmtYC.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113182414153"></p><p>到这里我们的个人博客网站本地已经搭建完成，为了能让更多的人看到我们的网站，我们就需要将网站上传到github上。</p><blockquote><p>在国内访问github一直都不太稳定，大家遇到网络问题在所难免，多试几次。</p><p>或者不用github，改用gitte也是一样的操作，但gitee需要实名认证审核才能使用配置Pages服务。这里只说明github方法。</p></blockquote><h3 id="三、在GitHub上建站访问"><a href="#三、在GitHub上建站访问" class="headerlink" title="三、在GitHub上建站访问"></a>三、在GitHub上建站访问</h3><h4 id="1-新建guthub仓库"><a href="#1-新建guthub仓库" class="headerlink" title="1.新建guthub仓库"></a>1.新建guthub仓库</h4><p><strong>仓库名称限制了为你的：用户名+.github.io</strong></p><p>你必须要用这种格式为你的仓库命名</p><p>举例：<img src="https://i.328888.xyz/2023/01/13/wmklP.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wmklP.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113185300068"></p><blockquote><p>一定要<strong>建立空仓库，不要有分支存在！！！</strong></p></blockquote><h4 id="2-安装-Hexo-上传插件"><a href="#2-安装-Hexo-上传插件" class="headerlink" title="2.安装 Hexo 上传插件"></a>2.安装 Hexo 上传插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h4 id="3、修改hexo配置文件指定仓库路径"><a href="#3、修改hexo配置文件指定仓库路径" class="headerlink" title="3、修改hexo配置文件指定仓库路径"></a>3、修改hexo配置文件指定仓库路径</h4><p>可在文件夹中直接打开文件，也可通过vim直接编辑</p><p>在博客文件夹的根目录下打开<code>_config.yml</code>,在最后修改geploy：部分</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim _config.yml </span><br><span class="line"><span class="comment">#找到（注意空格和对齐）修改如下：</span></span><br><span class="line">deploy:  </span><br><span class="line"><span class="built_in">type</span>: git  </span><br><span class="line">repo: 你的github仓库路径  </span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><p><img src="https://i.328888.xyz/2023/01/13/wmCMt.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wmCMt.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113184855722"></p><h4 id="4、推送站点到github"><a href="#4、推送站点到github" class="headerlink" title="4、推送站点到github"></a>4、推送站点到github</h4><p>推送命令(上传报错多位网络原因，多上传几次即可)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>推送过程中需要输入你的github用户名和密码。但是在2021年8月14日开始github官方就加强安全访问。不能通过原有账号密码git访问，密码需要用官方的token或者采用ssh公私钥访问。否则会出现：鉴权失败</p><p>所以我们需要获取到自己的仓库所需要的令牌token，当作密码进行操作。</p><blockquote><p>登录github设置setting-&gt;Developer Settings-&gt;Prosonal access tokens 创建一个新token。然后就可以拿这个token当密码输入了。</p></blockquote><p><img src="https://i.328888.xyz/2023/01/13/wmwnJ.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wmwnJ.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113185336545"></p><p><img src="https://i.328888.xyz/2023/01/13/wm2cc.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wm2cc.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113185438815"></p><p><strong>在设置令牌时，名字随便取，期限建议直接永久，权限全选上。</strong></p><p><strong>密钥生成后保存下来，后期会频繁用到</strong></p><p>继续使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d  <span class="comment">#重新上传，上传过程中输入github的用户名和刚刚生成的密钥</span></span><br></pre></td></tr></table></figure><p>如果出现错误（没有则跳过）：<img src="https://i.328888.xyz/2023/01/13/wmHsA.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wmHsA.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113190251115"></p><blockquote><p>在git创建项目时出现，<br>是因为在创建git文件夹的时候信息不完善导致的</p></blockquote><p>只需要Run</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">&quot;you@example.com&quot;</span> <span class="comment">#注册github 的邮箱</span></span><br><span class="line">git config --global user.name <span class="string">&quot;Your Name&quot;</span> <span class="comment">#github用户名</span></span><br></pre></td></tr></table></figure><h4 id="5-推送完成尝试访问"><a href="#5-推送完成尝试访问" class="headerlink" title="5.推送完成尝试访问"></a>5.推送完成尝试访问</h4><p><img src="https://i.328888.xyz/2023/01/13/wmbfo.png" class="lazyload placeholder" data-srcset="https://i.328888.xyz/2023/01/13/wmbfo.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" alt="image-20230113190708862"></p><p>输入你的仓库名称,即可访问成功。</p><p>尝试访问<a href="https://alexander798798.github.io/">https://alexander798798.github.io/</a></p><p>到这里我们的个人博客网页就算搭建完成了。下一步就是更换自己喜欢的主题和动手写第一篇自己的博客了。</p><p>感谢观看！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
